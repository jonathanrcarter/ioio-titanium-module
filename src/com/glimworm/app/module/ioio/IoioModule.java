/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.glimworm.app.module.ioio;

import ioio.lib.api.DigitalOutput;
import ioio.lib.api.IOIO;
import ioio.lib.api.IOIO.State;
import ioio.lib.api.IOIOFactory;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;


@Kroll.module(name="Ioio", id="com.glimworm.app.module.ioio")
public class IoioModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "IoioModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public IoioModule()
	{
		super();
	}

	
	public static IOIO ioiox = null;
	public static DigitalOutput[] led_ = {null,null,null,null};
	
	public boolean connect() {
		if (ioiox != null && ioiox.getState() == State.CONNECTED) return true;
   		try {
			System.out.println("START -- 01");
			ioiox = IOIOFactory.create();
			System.out.println("START -- 02");
			ioiox.waitForConnect();
			System.out.println("START -- 03");
			return true;
		} catch (Exception E) {
			System.out.println("START -- 04");
			System.out.println("ERROR 1");
			System.out.println("START -- 05");
			E.printStackTrace();
			System.out.println("START -- 06");
			return false;
		}
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		
	}

	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}
	
	@Kroll.method
	public String relay(int PIN, boolean val)
	{
		Log.d(LCAT, "example called");
		if (connect()) {
			try {
				if (led_[PIN] == null) {
					led_[PIN] = ioiox.openDigitalOutput(PIN);
				}
				led_[PIN].write(val);
				return "ok";
			} catch (Exception E) {
				E.printStackTrace(System.out);
				return E.getMessage();
			}
			
		}
		return "unknown";
		
	}
	
	@Kroll.method
	public String flash(int PIN)
	{
		Log.d(LCAT, "example called");
		if (connect()) {
			try {
				DigitalOutput led_ = ioiox.openDigitalOutput(PIN);
				led_.write(false);
				Thread.sleep(1500);
				led_.write(true);
				Thread.sleep(1500);
				led_.write(true);
				led_.close();
				return "ok";
			} catch (Exception E) {
				E.printStackTrace(System.out);
				return E.getMessage();
			}
			
		}
		return "unknown";
		
	}
	
	
	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(LCAT, "get example property");
		return "hello world";
	}
	
	
	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

}

